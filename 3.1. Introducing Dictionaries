One of Python's built-in datatypes is the dictionary, which defines one-to-one relationships between keys and values.

Note
A dictionary in Python is like a hash in Perl. In Perl, variables that store hashes always start with a % character. In Python, variables can be named anything, and Python keeps track of the datatype internally.
Note
A dictionary in Python is like an instance of the Hashtable class in Java.
Note
A dictionary in Python is like an instance of the Scripting.Dictionary object in Visual Basic.
3.1.1. Defining Dictionaries
Example 3.1. Defining a Dictionary
>>> d = {"server":"mpilgrim", "database":"master"} 1
>>> d
{'server': 'mpilgrim', 'database': 'master'}
>>> d["server"]                                    2
'mpilgrim'
>>> d["database"]                                  3
'master'
>>> d["mpilgrim"]                                  4
Traceback (innermost last):
  File "<interactive input>", line 1, in ?
KeyError: mpilgrim
1	First, you create a new dictionary with two elements and assign it to the variable d. Each element is a key-value pair, and the whole set of elements is enclosed in curly braces.
2	'server' is a key, and its associated value, referenced by d["server"], is 'mpilgrim'.
3	'database' is a key, and its associated value, referenced by d["database"], is 'master'.
4	You can get values by key, but you can't get keys by value. So d["server"] is 'mpilgrim', but d["mpilgrim"] raises an exception, because 'mpilgrim' is not a key.
字典就是key-value类型，使用[]来新增和修改元素，[]访问不存在的key时会抛KeyError异常
3.1.2. Modifying Dictionaries
Example 3.2. Modifying a Dictionary
>>> d
{'server': 'mpilgrim', 'database': 'master'}
>>> d["database"] = "pubs" 1
>>> d
{'server': 'mpilgrim', 'database': 'pubs'}
>>> d["uid"] = "sa"        2
>>> d
{'server': 'mpilgrim', 'uid': 'sa', 'database': 'pubs'}
1	You can not have duplicate keys in a dictionary. Assigning a value to an existing key will wipe out the old value.
2	You can add new key-value pairs at any time. This syntax is identical to modifying existing values. (Yes, this will annoy you someday when you think you are adding new values but are actually just modifying the same value over and over because your key isn't changing the way you think it is.)
Note that the new element (key 'uid', value 'sa') appears to be in the middle. In fact, it was just a coincidence that the elements appeared to be in order in the first example; it is just as much a coincidence that they appear to be out of order now.

Note
Dictionaries have no concept of order among elements. It is incorrect to say that the elements are “out of order”; they are simply unordered. This is an important distinction that will annoy you when you want to access the elements of a dictionary in a specific, repeatable order (like alphabetical order by key). There are ways of doing this, but they're not built into the dictionary.
When working with dictionaries, you need to be aware that dictionary keys are case-sensitive.
字典是无序的
Example 3.3. Dictionary Keys Are Case-Sensitive
>>> d = {}
>>> d["key"] = "value"
>>> d["key"] = "other value" 1
>>> d
{'key': 'other value'}
>>> d["Key"] = "third value" 2
>>> d
{'Key': 'third value', 'key': 'other value'}
1	Assigning a value to an existing dictionary key simply replaces the old value with a new one.
2	This is not assigning a value to an existing dictionary key, because strings in Python are case-sensitive, so 'key' is not the same as 'Key'. This creates a new key/value pair in the dictionary; it may look similar to you, but as far as Python is concerned, it's completely different.
字典的key是大小写敏感的
Example 3.4. Mixing Datatypes in a Dictionary
>>> d
{'server': 'mpilgrim', 'uid': 'sa', 'database': 'pubs'}
>>> d["retrycount"] = 3 1
>>> d
{'server': 'mpilgrim', 'uid': 'sa', 'database': 'master', 'retrycount': 3}
>>> d[42] = "douglas"   2
>>> d
{'server': 'mpilgrim', 'uid': 'sa', 'database': 'master',
42: 'douglas', 'retrycount': 3}
1	Dictionaries aren't just for strings. Dictionary values can be any datatype, including strings, integers, objects, or even other dictionaries. And within a single dictionary, the values don't all need to be the same type; you can mix and match as needed.
1 字典的key的类型不需要是统一的一个类型
2	Dictionary keys are more restricted, but they can be strings, integers, and a few other types. You can also mix and match key datatypes within a dictionary.
2 字典的key的类型能够使用string,整数还有其他的有限的一些类型。
3.1.3. Deleting Items From Dictionaries
Example 3.5. Deleting Items from a Dictionary
>>> d
{'server': 'mpilgrim', 'uid': 'sa', 'database': 'master',
42: 'douglas', 'retrycount': 3}
>>> del d[42] 1
>>> d
{'server': 'mpilgrim', 'uid': 'sa', 'database': 'master', 'retrycount': 3}
>>> d.clear() 2
>>> d
{}
1	del lets you delete individual items from a dictionary by key.
2	clear deletes all items from a dictionary. Note that the set of empty curly braces signifies a dictionary without any items.
Further Reading on Dictionaries
How to Think Like a Computer Scientist teaches about dictionaries and shows how to use dictionaries to model sparse matrices.
Python Knowledge Base has a lot of example code using dictionaries.
Python Cookbook discusses how to sort the values of a dictionary by key.
Python Library Reference summarizes all the dictionary methods.
